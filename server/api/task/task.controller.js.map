{"version":3,"sources":["api/task/task.controller.js"],"names":["create","apply","getusers","show","gettasks","reject","approve","validationError","res","statusCode","err","status","json","handleError","send","req","newTask","Task","body","save","then","success","message","catch","userid","user","_id","taskid","params","id","error","findById","exec","task","update","$addToSet","pending","msg","nModified","User","find","users","taskId","populate","tasks","rejected","$pull","mongoose","Types","ObjectId","points","approved","isbonustask","$inc","bonuspoints"],"mappings":"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","file":"task.controller.js","sourcesContent":["'use strict';\n\nimport Task from './task.model';\nimport User from '../user/user.model';\nimport mongoose from 'mongoose';\nfunction validationError(res, statusCode) {\n  statusCode = statusCode || 422;\n  return function(err) {\n    return res.status(statusCode).json(err);\n  };\n}\n\nfunction handleError(res, statusCode) {\n  statusCode = statusCode || 500;\n  return function(err) {\n    return res.status(statusCode).send(err);\n  };\n}\n\n/**\n * Get list of users\n * restriction: 'admin'\n */\n\n/**\n * Creates a new user\n */\nexport function create(req, res) {\n  var newTask = new Task(req.body);\n  newTask.save()\n    .then(function() {\n      res.json({success: true, message: 'New Task Created'});\n    })\n    .catch(validationError(res));\n}\n\n// export function edittask(req, res) {\n//     var userid = req.user._id;\n//     var task = req.body;\n//     console.log(task);\n//     var error = false;\n//     return Task.findById(taskid).exec()\n//       .then(task => {\n//         if(!task) {\n//         return res.json({success: false, message : \"No such task available\"});\n//         }\n//         Task.update({_id:taskid},{$set: { name: 'jason bourne' }}, function(err,msg){\n//         if(err) throw err;\n//         if(msg.nModified == 0) //1 in console\n//           {\n//             res.json({success: false, message: 'Already applied'});\n//           }\n//           else {\n//             res.json({success: true, message: 'Applied'});\n//           }\n//        });\n//\n//     });\n// }\n\n\n\nexport function apply(req, res) {\n    var userid = req.user._id;\n    var taskid = req.params.id;\n    var error = false;\n    return Task.findById(taskid).exec()\n      .then(task => {\n        if(!task) {\n        return res.json({success: false, message : \"No such task available\"});\n        }\n        Task.update({_id:taskid},{$addToSet:{pending: userid}}, function(err,msg){\n        if(err) throw err;\n        if(msg.nModified == 0) //1 in console\n          {\n            res.json({success: false, message: 'Already applied'});\n          }\n          else {\n            res.json({success: true, message: 'Applied'});\n          }\n       });\n\n    });\n}\n\nexport function getusers(req, res) {\n\n  var id = req.params.id;\n  User.find({'files.taskid': id}).exec()\n  .then(users => {\n    if(!users){\n      res.json({success: false, message: \"Users no longer exists\"});\n    }\n    else {\n      res.json({success: true, users: users});\n    }\n  })\n  .catch(handleError(res));\n}\n\nexport function show(req, res) {\n  var taskId = req.params.id;\n\n  return Task.findById(taskId).exec()\n    .then(task => {\n      if(!task) {\n        return res.status(404);\n      }\n      res.json({success: true, task: task});\n    })\n    .catch(handleError(res));\n}\n\nexport function gettasks(req, res) {\n\n  var userid = req.user._id;\n  Task.find({}).\n  populate('approved').exec()\n  .then(tasks => {\n    res.status(200).json({tasks: tasks, userid: userid});\n  })\n  .catch(handleError(res));\n}\n\nexport function reject(req, res) {\n\n  var taskId = req.params.id;\n  var userid = req.body.userid;\n\n  Task.findById(taskId).exec()\n  .then(task => {\n    if (!task) {\n      return res.json({success: false, msg: 'no such task exists!'});\n    }\n    Task.update({_id: taskId}, {$addToSet: {rejected: userid}}, function(err, msg) {\n      if (err) throw err;\n      if  (msg.nModified == 0){\n        res.json({success: false, msg: 'Already rejected!'});\n      }\n      else {\n        Task.update({'_id': taskId}, {$pull: {'approved': mongoose.Types.ObjectId(userid)}}, function(err, msg) {\n          if (err) throw err;\n          res.json({success: true, msg: \"Rejected!\"});\n        });\n      }\n    });\n  });\n}\n\nexport function approve(req, res) {\n\n  var taskId = req.params.id;\n  var userid = req.body.userid;\n\n  Task.findById(taskId).exec()\n  .then(task => {\n    if(!task) {\n\n      return res.json({success: false, msg: \"no such task exists!\"});\n    }\n    var points = task.points;\n    //addtoset will add the id of the user to the approved array of tasks model\n    Task.update({_id: taskId}, {$addToSet:{approved: userid}}, function(err, msg){\n\n      if (err) throw err;\n      if(msg.nModified == 0) {\n\n        res.json({success: false, msg: 'Already approved!'});\n      }\n      else {\n        //checking for bonus task\n        if(task.isbonustask){\n          //adding points here using $inc\n          User.update({_id: userid}, {$inc: {bonuspoints: points}}, function(err, msg) {\n            if (err) throw err;\n          });\n          }\n        else {\n          //adding points here using $inc\n          User.update({_id: userid}, {$inc: {points: points}}, function(err, msg) {\n            if (err) throw err;\n          });\n          }\n\n        Task.update({'_id': taskId}, {$pull: {'rejected': mongoose.Types.ObjectId(userid)}}, function(err, msg) {\n          if (err) throw err;\n          res.json({success: true, msg: \"Approved!\"});\n        });\n      }\n    });\n  });\n}\n"]}